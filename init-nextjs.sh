#!/bin/bash

read -r -p "Project name: " project_name
read -r -p "Do you want to use Tailwind CSS or Chakra-UI? (tailwind/chakra): " ui_library

create_next_app_command="npx create-next-app@latest \"$project_name\" --typescript --empty --use-pnpm --eslint --no-src-dir --app --tailwind"

eval "$create_next_app_command"

# Add Chakra UI if selected
if [ "$ui_library" == "chakra" ]; then
  cd "$project_name" || stderr "Could not change directory to $project_name"
  pnpm add @chakra-ui/react @emotion/react @emotion/styled framer-motion
  cd ..
fi

# Add prettier
cd "$project_name" || stderr "Could not change directory to $project_name"
pnpm add -D prettier concurrently react-icons

# Create components folder
mkdir -p components

# Modify the package.json file
sed -i '' '/"scripts": {/a\
    "sort-imports": "npx eslint --fix \\"{app,lib,components,hooks,middleware,e2e,providers}/**/*.{ts,tsx,mdx}\\"",\
    "prettier": "prettier --write \\"{app,lib,components,hooks,middleware,e2e,providers}/**/*.{ts,tsx,mdx}\\" --cache --end-of-line lf --use-tabs false --single-quote --arrow-parens avoid --tab-width 2",\
    "clean": "concurrently \\"pnpm sort-imports\\" \\"pnpm prettier\\"",\
' package.json

# Update the .eslintrc.json file for sorting imports
cat <<EOT > .eslintrc.json
{
  "extends": ["next", "next/core-web-vitals"],
  "rules": {
    "import/order": [
      "warn",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "pathGroups": [
          {
            "pattern": "react",
            "group": "external",
            "position": "before"
          }
        ],
        "pathGroupsExcludedImportTypes": ["react"],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "react-hooks/exhaustive-deps": "off"
  }
}
EOT

# If the user opted for Chakra-UI, create the components/Providers.tsx file
if [ "$ui_library" == "chakra" ]; then
  cat <<EOT > components/Providers.tsx
import { ReactNode, Suspense } from 'react';

import { ChakraProvider, extendTheme } from '@chakra-ui/react';

import Loading from '@/app/loading';

const theme = extendTheme({
  fontWeights: {
    normal: 400,
    medium: 500,
    bold: 700,
  },
});

export default theme;

interface ProvidersProps {
  children: ReactNode;
}

function ProvidersContent({ children }: ProvidersProps) {
  return <ChakraProvider theme={theme}>{children}</ChakraProvider>;
}

export function Providers({ children }: ProvidersProps) {
  return (
    <Suspense fallback={<Loading />}>
      <ProvidersContent>{children}</ProvidersContent>;
    </Suspense>
  );
}
EOT
fi

# If the user opted for Chakra-UI, add the provider to app/layout.tsx
if [ "$ui_library" == "chakra" ]; then
  echo "Creating app/layout.tsx for Chakra-UI..."
  cat <<EOT > app/layout.tsx
import type { Metadata } from "next";
import { ReactNode } from "react";
import { Inter } from "next/font/google";
import { Providers } from '@/components/utils/Providers';
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers>
        {children}
        </Providers>
      </body>
    </html>
  );
}
EOT
fi

# Update the globals.css file
cat <<EOT > app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}
EOT

# Update app/page.tsx
cat <<EOT > app/page.tsx
export default function Home() {
  return <div>Hello World</div>;
}
EOT

# Create loading page
if [ "$ui_library" == "chakra" ]; then
  cat <<EOT > app/loading.tsx
'use client'; // Loading components can be Client Components

import { Box, Center, keyframes } from '@chakra-ui/react';

const pulse = keyframes\`
  0% { stroke-dashoffset: 0; }
  100% { stroke-dashoffset: -260; }
\`;

export default function Loading() {
  return (
    <Box w="100%" h="100vh">
      <Center flexDir="column" h="100%">
        <Box
          as="svg"
          viewBox="0 0 50 50"
          strokeWidth="4"
          strokeLinecap="round"
          fill="none"
          h={['100%', '50%']}
          transform={['scale(0.4)', 'scale(0.6)', 'scale(1)', 'scale(1)']}
        >
          <Box
            as="circle"
            stroke="gray.500"
            opacity=".7"
            cx="25"
            cy="25"
            r="20"
          />
          <Box
            as="circle"
            stroke="gray.900"
            strokeDasharray="130"
            strokeDashoffset="0"
            cx="25"
            cy="25"
            r="20"
            animation={\`\${pulse} 2s ease-in-out infinite\`}
          />
        </Box>
      </Center>
    </Box>
  );
}
EOT
else
  cat <<EOT > app/loading.tsx
'use client'; // Loading components can be Client Components

export default function Loading() {
  return (
    <div className="w-full h-[100vh]">
      <div className="flex flex-col items-center justify-center h-full">
        <svg
          viewBox="0 0 50 50"
          strokeWidth="4"
          strokeLinecap="round"
          fill="none"
          className="h-full md:h-1/2 transform scale-[0.4] md:scale-[0.6] lg:scale-100"
        >
          <circle
            stroke="gray"
            opacity=".7"
            cx="25"
            cy="25"
            r="20"
            className="stroke-gray-500"
          />
          <circle
            stroke="gray"
            cx="25"
            cy="25"
            r="20"
            className="stroke-gray-900 animate-[dash_2s_ease-in-out_infinite]"
            style={{
              strokeDasharray: 130,
              strokeDashoffset: 0,
            }}
          />
        </svg>
      </div>
    </div>
  );
}
EOT
fi

# Create not found page
cat <<EOT >> app/not-found.tsx
import { NotFound } from '@/components/pages/NotFound';

export default function NotFoundPage() {
  return <NotFound />;
}
EOT

# Create not found client component
mkdir -p components/pages
if [ "$ui_library" == "chakra" ]; then
  cat <<EOT > components/pages/NotFound.tsx
'use client';

import { Box, Button, Center, Heading, Text, VStack } from '@chakra-ui/react';
import { FaExclamationTriangle } from 'react-icons/fa';

export const NotFound = () => {
  return (
    <Box w="100%" h="80vh" p={10}>
      <Center flexDir="column" h="100%">
        <VStack
          spacing={6}
          padding={8}
          backgroundColor="white"
          borderRadius="lg"
          boxShadow="2xl"
        >
          <Box as={FaExclamationTriangle} size="50px" color="red.500" />
          <Heading as="h2" size="xl" color="gray.700">
            Page Not Found
          </Heading>
          <Text fontSize="lg" color="gray.500">
            Could not find the requested resource.
          </Text>
          <Button as="a" href="/" size="lg" aria-label="Return Home">
            Return Home
          </Button>
        </VStack>
      </Center>
    </Box>
  );
};
EOT
else
  cat <<EOT > components/pages/NotFound.tsx
'use client';

import { FaExclamationTriangle } from 'react-icons/fa';

export const NotFound = () => {
  return (
    <div className="w-full h-[80vh] p-10">
      <div className="flex flex-col items-center justify-center h-full">
        <div className="flex flex-col items-center p-8 bg-white rounded-lg shadow-2xl space-y-6">
          <FaExclamationTriangle className="text-red-500 text-[50px]" />
          <h2 className="text-2xl font-bold text-gray-700">
            Page Not Found
          </h2>
          <p className="text-lg text-gray-500">
            Could not find the requested resource.
          </p>
          <a href="/" className="px-6 py-3 text-lg font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
            Return Home
          </a>
        </div>
      </div>
    </div>
  );
};
EOT
fi

# Add .idea to .gitignore
echo ".idea" >> .gitignore

# Remove files from public folder
rm -rf public/*

eval "pnpm clean"
